import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))         # –¥–ª—è /settext –∏ /broadcast
ORGANIZER_ID = 1558696819                     # Telegram ID –û–∫—Å–∞–Ω—ã (–ø–æ–ª—É—á–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
ORGANIZER_USERNAME = 'OxanaEroshenko'

user_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ‚ú® –¶–µ—Ä–µ–º–æ–Ω–∏—è –∫–∞–∫–∞–æ –∂–¥—ë—Ç –≤–∞—Å."
REGISTERED_USERS = {}
SUBSCRIBERS = set()

# –®–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
REGISTRATION_STEP = {
    "name": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
    "surname": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
    "payment": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    SUBSCRIBERS.add(update.effective_chat.id)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='register')],
        [InlineKeyboardButton("‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –û–∫—Å–∞–Ω–µ", url=f"https://t.me/{ORGANIZER_USERNAME}")]
    ]

    try:
        with open("cacao.jpg", "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=user_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except FileNotFoundError:
        await update.message.reply_text(user_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'register':
        context.user_data['step'] = 'name'
        await query.message.reply_text(REGISTRATION_STEP['name'])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get('step')

    if step == 'name':
        context.user_data['name'] = update.message.text
        context.user_data['step'] = 'surname'
        await update.message.reply_text(REGISTRATION_STEP['surname'])

    elif step == 'surname':
        context.user_data['surname'] = update.message.text
        context.user_data['step'] = 'payment'
        keyboard = [
            [
                InlineKeyboardButton("üí∂ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data='pay_cash'),
                InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data='pay_card')
            ]
        ]
        await update.message.reply_text(REGISTRATION_STEP['payment'],
                                        reply_markup=InlineKeyboardMarkup(keyboard))

    elif step is None:
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    payment_method = "–ù–∞–ª–∏—á–Ω—ã–µ" if query.data == 'pay_cash' else "–ö–∞—Ä—Ç–∞"
    context.user_data['payment'] = payment_method
    context.user_data['step'] = None

    name = context.user_data.get('name', '')
    surname = context.user_data.get('surname', '')
    payment = context.user_data.get('payment', '')

    confirmation = (
        f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {name}!\n"
        f"–§–∞–º–∏–ª–∏—è: {surname}\n"
        f"–û–ø–ª–∞—Ç–∞: {payment}\n\n"
        f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏! ‚ú®"
    )
    await query.message.reply_text(confirmation)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –û–∫—Å–∞–Ω–µ
    message_to_organizer = (
        f"üìù –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n"
        f"–ò–º—è: {name}\n"
        f"–§–∞–º–∏–ª–∏—è: {surname}\n"
        f"–û–ø–ª–∞—Ç–∞: {payment}\n"
        f"Telegram: @{update.effective_user.username or '–Ω–µ—Ç username'}"
    )
    try:
        await context.bot.send_message(chat_id=ORGANIZER_ID, text=message_to_organizer)
    except:
        print("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.")

async def settext(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.")
        return
    global user_text
    user_text = " ".join(context.args)
    await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
        return
    sent = 0
    for user_id in SUBSCRIBERS:
        try:
            await context.bot.send_message(chat_id=user_id, text=user_text)
            sent += 1
        except:
            continue
    await update.message.reply_text(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} —Å–æ–æ–±—â–µ–Ω–∏–π.")

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("settext", settext))
app.add_handler(CommandHandler("broadcast", broadcast))
app.add_handler(CallbackQueryHandler(handle_buttons, pattern="register"))
app.add_handler(CallbackQueryHandler(handle_payment, pattern="pay_"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.run_polling()
