from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = '7957459085:AAE6BGRPlvJr2fYr5DZbISVPTb1sBN545Co'
ORGANIZER_USERNAME = 'OxanaEroshenko'
REGISTERED_USERS = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caption = (
        "**–¶–ï–†–ï–ú–û–ù–ò–Ø –ö–ê–ö–ê–û –í –ì–ê–ú–ë–£–†–ì–ï**\n"
        "üìÖ *31 –º–∞—è*  | üïô *10:00‚Äì15:00*  | üìç *LovelyFit*\n\n"
        "üåø –ì–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Å–µ–±—è —á–µ—Ä–µ–∑ –∫–∞–∫–∞–æ, –∫—Ä—É–≥, –º–∞–Ω—Ç—Ä—ã –∏ –¥–≤–∏–∂–µ–Ω–∏–µ.\n"
        "üí´ –ì–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏—è –º—É–∂—Å–∫–æ–≥–æ –∏ –∂–µ–Ω—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞, –µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–µ–ª–æ–º –∏ –¥—É—Ö–æ–º.\n\n"
        "ü´ñ –í–∞—Ä–∏–º —Ü–µ—Ä–µ–º–æ–Ω–∏–∞–ª—å–Ω–æ–µ –∫–∞–∫–∞–æ\n"
        "üé¥ –†–∞–±–æ—Ç–∞ —Å –ú–ê–ö-–∫–∞—Ä—Ç–∞–º–∏ –î–û –∏ –ü–û–°–õ–ï\n"
        "üé∂ –ó–≤—É–∫–æ—Ç–µ—Ä–∞–ø–∏—è: —á–∞—à–∏, —à—É–º –¥–æ–∂–¥—è\n"
        "üëÅÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∞ ¬´–°–º–æ—Ç—Ä–∏–º –≤ –≥–ª–∞–∑–∞¬ª\n"
        "üïä –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π —Ç–∞–Ω–µ—Ü –≤ –º–∞—Å–∫–∞—Ö\n"
        "üíû –ö—Ä—É–≥: —Å—á–∞—Å—Ç—å–µ, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥—Ö–∞—Ä–º–∞\n\n"
        "üéÅ –£—á–∞—Å—Ç–∏–µ ‚Äî *–ø–æ –¥–æ–Ω–µ–π—à–Ω*: —Å–∫–æ–ª—å–∫–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è —Å–µ—Ä–¥—Ü—É\n"
        "üìå –ú–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å!"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='register')],
        [InlineKeyboardButton("‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –û–∫—Å–∞–Ω–µ", url=f"https://t.me/{ORGANIZER_USERNAME}")]
    ]

    with open("cacao.jpg", "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption=caption,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'register':
        context.user_data['registering'] = True
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏—é:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('registering'):
        name = update.message.text
        user = update.message.from_user
        context.user_data['registering'] = False

        REGISTERED_USERS[user.id] = {
            'name': name,
            'username': user.username,
            'tg_id': user.id
        }

        confirmation = (
            f"–°–ø–∞—Å–∏–±–æ, {name}! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏—é 31 –º–∞—è.\n"
            f"üíå –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ @{ORGANIZER_USERNAME}."
        )
        await update.message.reply_text(confirmation)

application = ApplicationBuilder().token(BOT_TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(handle_buttons))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

application.run_polling()
